
@* first step is to find out what is being passed form controller to the view and in our case it is a list of categories hence line 3 *@
@model IEnumerable<Category>

@{
    ViewData["Title"] = "Category | Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


    <div class="border backgroundWhite mt-5">
        <div class="row mb-3">
            <div class="col-6">
                <h2 class="text-info">Category List</h2>
            </div>
            <div class="col-6 text-right">
                <partial name="_CreateButtonPartial"/>
            </div>
        </div>
        <div>
            @if (Model.Count() > 0)
            {
                <table class="table table-striped border">
                    <thead>
                        <tr>
                            <th>
                                @* Generates html string literals for the property or display name attribute of the property for the set of the model it is called on
                            which in our case is category model
                                    this means that it takes the first item (category object) in a particular collection which in our case is an IEnumerable<Category Objects> and displays either Display name attribute or the property Name of that first item. for e.g Name is a property in Category Model
                                    "m" here represents the one item in the collection
                                *@
                                @Html.DisplayNameFor(m => m.Name)
                            </th>
                            <th colspan="2" class="text-right">
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var category in Model)
                        {
                            <tr>
                                <td>
                                    @*
                                Model = Ienum of category which means it is an array(collection) of category object model

                                because of the above, it can be looped over to target each category object(model)

                                Now, DisplayFor ==>  Generates html string literals for the value of the property of the model it is called on
                                which in our case is category model Name property
                                    *@
                                    @Html.DisplayFor(m => category.Name)
                                </td>
                                <partial name="_EditDetailDelete" model="@category.Id"/>
                            </tr>
                        }
                    </tbody>
                </table>
            } else
            {
                <p>No Category in the List...</p>
            }

        </div>
    </div>
